# -*- coding: utf-8 -*-

"""
notionapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

import json

from tests.controllers.controller_test_base import ControllerTestBase
from apimatic_core.utilities.comparison_helper import ComparisonHelper
from notionapi.api_helper import APIHelper


class UsersControllerTests(ControllerTestBase):

    controller = None

    @classmethod
    def setUpClass(cls):
        super(UsersControllerTests, cls).setUpClass()
        cls.controller = cls.client.users
        cls.response_catcher = cls.controller.http_call_back

    # Retrieve a user object using the ID specified in the request path.
    def test_retrieve_a_user(self):
        # Parameters for the API call
        id = '{{USER_ID}}'
        notion_version = '{{NOTION_VERSION}}'

        # Perform the API call through the SDK function
        result = self.controller.retrieve_a_user(id, notion_version)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['date'] = None
        expected_headers['transfer-encoding'] = None
        expected_headers['connection'] = None
        expected_headers['set-cookie'] = None
        expected_headers['x-dns-prefetch-control'] = None
        expected_headers['x-frame-options'] = None
        expected_headers['strict-transport-security'] = None
        expected_headers['x-download-options'] = None
        expected_headers['x-content-type-options'] = None
        expected_headers['x-xss-protection'] = None
        expected_headers['referrer-policy'] = None
        expected_headers['content-security-policy'] = None
        expected_headers['x-content-security-policy'] = None
        expected_headers['x-webkit-csp'] = None
        expected_headers['etag'] = None
        expected_headers['vary'] = None
        expected_headers['cf-cache-status'] = None
        expected_headers['expect-ct'] = None
        expected_headers['server'] = None
        expected_headers['cf-ray'] = None
        expected_headers['content-encoding'] = None
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('{"object":"user","id":"6794760a-1f15-45cd-9c65-0dfe42f5135a","name'
            '":"Aman Gupta","avatar_url":null,"type":"person","person":{"email"'
            ':"XXXXXXXXXXX"}}')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # Returns a paginated list of user objects for a workspace
    def test_list_all_users(self):
        # Parameters for the API call
        notion_version = '{{NOTION_VERSION}}'

        # Perform the API call through the SDK function
        result = self.controller.list_all_users(notion_version)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['date'] = None
        expected_headers['transfer-encoding'] = None
        expected_headers['connection'] = None
        expected_headers['set-cookie'] = None
        expected_headers['x-dns-prefetch-control'] = None
        expected_headers['x-frame-options'] = None
        expected_headers['strict-transport-security'] = None
        expected_headers['x-download-options'] = None
        expected_headers['x-content-type-options'] = None
        expected_headers['x-xss-protection'] = None
        expected_headers['referrer-policy'] = None
        expected_headers['content-security-policy'] = None
        expected_headers['x-content-security-policy'] = None
        expected_headers['x-webkit-csp'] = None
        expected_headers['etag'] = None
        expected_headers['vary'] = None
        expected_headers['content-encoding'] = None
        expected_headers['cf-cache-status'] = None
        expected_headers['expect-ct'] = None
        expected_headers['server'] = None
        expected_headers['cf-ray'] = None
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('{"object":"list","results":[{"object":"user","id":"6794760a-1f15-4'
            '5cd-9c65-0dfe42f5135a","name":"Aman Gupta","avatar_url":null,"type'
            '":"person","person":{"email":"XXXXXXXXXX"}},{"object":"user","id":'
            '"92a680bb-6970-4726-952b-4f4c03bff617","name":"Leotastic","avatar_'
            'url":null,"type":"bot","bot":{"owner":{"type":"workspace","workspa'
            'ce":true}}}],"next_cursor":null,"has_more":false}')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # Retrieve your tokenâ€™s bot user
    def test_retrieve_your_token_s_bot_user(self):
        # Parameters for the API call
        notion_version = '{{NOTION_VERSION}}'

        # Perform the API call through the SDK function
        result = self.controller.retrieve_your_token_s_bot_user(notion_version)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['date'] = None
        expected_headers['transfer-encoding'] = None
        expected_headers['connection'] = None
        expected_headers['set-cookie'] = None
        expected_headers['x-dns-prefetch-control'] = None
        expected_headers['x-frame-options'] = None
        expected_headers['strict-transport-security'] = None
        expected_headers['x-download-options'] = None
        expected_headers['x-content-type-options'] = None
        expected_headers['x-xss-protection'] = None
        expected_headers['referrer-policy'] = None
        expected_headers['content-security-policy'] = None
        expected_headers['x-content-security-policy'] = None
        expected_headers['x-webkit-csp'] = None
        expected_headers['etag'] = None
        expected_headers['vary'] = None
        expected_headers['cf-cache-status'] = None
        expected_headers['expect-ct'] = None
        expected_headers['server'] = None
        expected_headers['cf-ray'] = None
        expected_headers['content-encoding'] = None
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('{"object":"user","id":"92a680bb-6970-4726-952b-4f4c03bff617","name'
            '":"Leotastic","avatar_url":null,"type":"bot","bot":{"owner":{"type'
            '":"workspace","workspace":true}}}')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

