# -*- coding: utf-8 -*-

"""
notionapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

import json

from tests.controllers.controller_test_base import ControllerTestBase
from apimatic_core.utilities.comparison_helper import ComparisonHelper
from notionapi.api_helper import APIHelper


class PagesControllerTests(ControllerTestBase):

    controller = None

    @classmethod
    def setUpClass(cls):
        super(PagesControllerTests, cls).setUpClass()
        cls.controller = cls.client.pages
        cls.response_catcher = cls.controller.http_call_back

    # Create a page with content
    def test_create_a_page_with_content(self):
        # Parameters for the API call
        authorization = 'Bearer secret_t1CdN9S8yicG5eWLUOfhcWaOscVnFXns'
        notion_version = '{{NOTION_VERSION}}'
        body = None

        # Perform the API call through the SDK function
        result = self.controller.create_a_page_with_content(authorization, notion_version, body)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['date'] = None
        expected_headers['transfer-encoding'] = None
        expected_headers['connection'] = None
        expected_headers['set-cookie'] = None
        expected_headers['x-dns-prefetch-control'] = None
        expected_headers['x-frame-options'] = None
        expected_headers['strict-transport-security'] = None
        expected_headers['x-download-options'] = None
        expected_headers['x-content-type-options'] = None
        expected_headers['x-xss-protection'] = None
        expected_headers['referrer-policy'] = None
        expected_headers['content-security-policy'] = None
        expected_headers['x-content-security-policy'] = None
        expected_headers['x-webkit-csp'] = None
        expected_headers['etag'] = None
        expected_headers['vary'] = None
        expected_headers['content-encoding'] = None
        expected_headers['cf-cache-status'] = None
        expected_headers['expect-ct'] = None
        expected_headers['server'] = None
        expected_headers['cf-ray'] = None
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('{"object":"page","id":"672b014a-2626-4ada-9211-fb3613d07ae2","crea'
            'ted_time":"2022-03-02T05:24:00.000Z","last_edited_time":"2022-03-0'
            '2T05:24:00.000Z","created_by":{"object":"user","id":"92a680bb-6970'
            '-4726-952b-4f4c03bff617"},"last_edited_by":{"object":"user","id":"'
            '92a680bb-6970-4726-952b-4f4c03bff617"},"cover":null,"icon":null,"p'
            'arent":{"type":"database_id","database_id":"8e2c2b76-9e1d-47d2-87b'
            '9-ed3035d607ae"},"archived":false,"properties":{"Score /5":{"id":"'
            ')Y7%22","type":"select","select":{"id":"5c944de7-3f4b-4567-b3a1-fa'
            '2c71c540b6","name":"‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è","color":"default"}},"Type":{"id":"'
            '%2F7eo","type":"select","select":{"id":"672b014a-2626-4ada-9211-fb'
            '3613d07ae2","name":"Article","color":"default"}},"Publisher":{"id"'
            ':"%3E%24Pb","type":"select","select":{"id":"01f82d08-aa1f-4884-a4e'
            '0-3bc32f909ec4","name":"The Atlantic","color":"red"}},"Summary":{"'
            'id":"%3F%5C25","type":"rich_text","rich_text":[{"type":"text","tex'
            't":{"content":"Some think chief ethics officers could help technol'
            'ogy companies navigate political and social questions.","link":nul'
            'l},"annotations":{"bold":false,"italic":false,"strikethrough":fals'
            'e,"underline":false,"code":false,"color":"default"},"plain_text":"'
            'Some think chief ethics officers could help technology companies n'
            'avigate political and social questions.","href":null}]},"Publishin'
            'g/Release Date":{"id":"%3Fex%2B","type":"date","date":{"start":"20'
            '20-12-08T12:00:00.000+00:00","end":null,"time_zone":null}},"Link":'
            '{"id":"VVMi","type":"url","url":"https://www.nytimes.com/2018/10/2'
            '1/opinion/who-will-teach-silicon-valley-to-be-ethical.html"},"Read'
            '":{"id":"_MWJ","type":"checkbox","checkbox":false},"Status":{"id":'
            '"%60zz5","type":"select","select":{"id":"8c4a056e-6709-4dd1-ba58-d'
            '34d9480855a","name":"Ready to Start","color":"yellow"}},"Author":{'
            '"id":"qNw_","type":"multi_select","multi_select":[]},"Name":{"id":'
            '"title","type":"title","title":[{"type":"text","text":{"content":"'
            'New Media Article","link":null},"annotations":{"bold":false,"itali'
            'c":false,"strikethrough":false,"underline":false,"code":false,"col'
            'or":"default"},"plain_text":"New Media Article","href":null}]}},"u'
            'rl":"https://www.notion.so/New-Media-Article-672b014a26264ada9211f'
            'b3613d07ae2"}')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # Retrieves a Page object using the ID in the request path. This endpoint exposes page properties, not page content. 
    def test_retrieve_a_page(self):
        # Parameters for the API call
        id = '{{PAGE_ID}}'
        notion_version = '{{NOTION_VERSION}}'

        # Perform the API call through the SDK function
        result = self.controller.retrieve_a_page(id, notion_version)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['date'] = None
        expected_headers['transfer-encoding'] = None
        expected_headers['connection'] = None
        expected_headers['set-cookie'] = None
        expected_headers['x-dns-prefetch-control'] = None
        expected_headers['x-frame-options'] = None
        expected_headers['strict-transport-security'] = None
        expected_headers['x-download-options'] = None
        expected_headers['x-content-type-options'] = None
        expected_headers['x-xss-protection'] = None
        expected_headers['referrer-policy'] = None
        expected_headers['content-security-policy'] = None
        expected_headers['x-content-security-policy'] = None
        expected_headers['x-webkit-csp'] = None
        expected_headers['etag'] = None
        expected_headers['vary'] = None
        expected_headers['cf-cache-status'] = None
        expected_headers['expect-ct'] = None
        expected_headers['server'] = None
        expected_headers['cf-ray'] = None
        expected_headers['content-encoding'] = None
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('{"object":"page","id":"c4d39556-6364-46a1-8a61-ebbb668f7445","crea'
            'ted_time":"2021-04-27T20:38:00.000Z","last_edited_time":"2022-03-0'
            '2T05:22:00.000Z","created_by":{"object":"user","id":"6794760a-1f15'
            '-45cd-9c65-0dfe42f5135a"},"last_edited_by":{"object":"user","id":"'
            '92a680bb-6970-4726-952b-4f4c03bff617"},"cover":null,"icon":{"type"'
            ':"emoji","emoji":"üìï"},"parent":{"type":"page_id","page_id":"c1218'
            '692-102d-4b47-ab38-c21900b3557b"},"archived":false,"properties":{"'
            'title":{"id":"title","type":"title","title":[{"type":"text","text"'
            ':{"content":"Reading List","link":null},"annotations":{"bold":fals'
            'e,"italic":false,"strikethrough":false,"underline":false,"code":fa'
            'lse,"color":"default"},"plain_text":"Reading List","href":null}]}}'
            ',"url":"https://www.notion.so/Reading-List-c4d39556636446a18a61ebb'
            'b668f7445"}')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # Archive a page
    def test_archive_a_page(self):
        # Parameters for the API call
        id = '{{PAGE_ID}}'
        notion_version = '{{NOTION_VERSION}}'
        body = None

        # Perform the API call through the SDK function
        result = self.controller.archive_a_page(id, notion_version, body)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['date'] = None
        expected_headers['transfer-encoding'] = None
        expected_headers['connection'] = None
        expected_headers['set-cookie'] = None
        expected_headers['x-dns-prefetch-control'] = None
        expected_headers['x-frame-options'] = None
        expected_headers['strict-transport-security'] = None
        expected_headers['x-download-options'] = None
        expected_headers['x-content-type-options'] = None
        expected_headers['x-xss-protection'] = None
        expected_headers['referrer-policy'] = None
        expected_headers['content-security-policy'] = None
        expected_headers['x-content-security-policy'] = None
        expected_headers['x-webkit-csp'] = None
        expected_headers['etag'] = None
        expected_headers['vary'] = None
        expected_headers['cf-cache-status'] = None
        expected_headers['expect-ct'] = None
        expected_headers['server'] = None
        expected_headers['cf-ray'] = None
        expected_headers['content-encoding'] = None
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('{"object":"block","id":"2646ac0d-df90-4bab-bb4e-75e3cb972ed1","cre'
            'ated_time":"2022-02-24T22:14:00.000Z","last_edited_time":"2022-02-'
            '24T22:15:00.000Z","created_by":{"object":"user","id":"6794760a-1f1'
            '5-45cd-9c65-0dfe42f5135a"},"last_edited_by":{"object":"user","id":'
            '"92a680bb-6970-4726-952b-4f4c03bff617"},"has_children":false,"arch'
            'ived":true,"type":"child_page","child_page":{"title":""}}')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

