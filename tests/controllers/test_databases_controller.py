# -*- coding: utf-8 -*-

"""
notionapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

import json

from tests.controllers.controller_test_base import ControllerTestBase
from apimatic_core.utilities.comparison_helper import ComparisonHelper
from notionapi.api_helper import APIHelper


class DatabasesControllerTests(ControllerTestBase):

    controller = None

    @classmethod
    def setUpClass(cls):
        super(DatabasesControllerTests, cls).setUpClass()
        cls.controller = cls.client.databases
        cls.response_catcher = cls.controller.http_call_back

    # Retrieves a database object using the ID specified in the request path. 
    def test_retrieve_a_database(self):
        # Parameters for the API call
        id = '{{DATABASE_ID}}'
        notion_version = '{{NOTION_VERSION}}'

        # Perform the API call through the SDK function
        result = self.controller.retrieve_a_database(id, notion_version)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['date'] = None
        expected_headers['transfer-encoding'] = None
        expected_headers['connection'] = None
        expected_headers['set-cookie'] = None
        expected_headers['x-dns-prefetch-control'] = None
        expected_headers['x-frame-options'] = None
        expected_headers['strict-transport-security'] = None
        expected_headers['x-download-options'] = None
        expected_headers['x-content-type-options'] = None
        expected_headers['x-xss-protection'] = None
        expected_headers['referrer-policy'] = None
        expected_headers['content-security-policy'] = None
        expected_headers['x-content-security-policy'] = None
        expected_headers['x-webkit-csp'] = None
        expected_headers['etag'] = None
        expected_headers['vary'] = None
        expected_headers['content-encoding'] = None
        expected_headers['cf-cache-status'] = None
        expected_headers['expect-ct'] = None
        expected_headers['server'] = None
        expected_headers['cf-ray'] = None
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('{"object":"database","id":"8e2c2b76-9e1d-47d2-87b9-ed3035d607ae","'
            'cover":null,"icon":null,"created_time":"2021-04-27T20:38:00.000Z",'
            '"created_by":{"object":"user","id":"6794760a-1f15-45cd-9c65-0dfe42'
            'f5135a"},"last_edited_by":{"object":"user","id":"6794760a-1f15-45c'
            'd-9c65-0dfe42f5135a"},"last_edited_time":"2022-02-24T22:14:00.000Z'
            '","title":[{"type":"text","text":{"content":"Ever Better Reading L'
            'ist Title","link":null},"annotations":{"bold":false,"italic":false'
            ',"strikethrough":false,"underline":false,"code":false,"color":"def'
            'ault"},"plain_text":"Ever Better Reading List Title","href":null}]'
            ',"properties":{"Score /5":{"id":")Y7%22","name":"Score /5","type":'
            '"select","select":{"options":[{"id":"5c944de7-3f4b-4567-b3a1-fa2c7'
            '1c540b6","name":"⭐️⭐️⭐️⭐️⭐️","color":"default"},{"id":"b7307e35-c8'
            '0a-4cb5-bb6b-6054523b394a","name":"⭐️⭐️⭐️⭐️","color":"default"},{"'
            'id":"9b1e1349-8e24-40ba-bbca-84a61296bc81","name":"⭐️⭐️⭐️","color"'
            ':"default"},{"id":"66d3d050-086c-4a91-8c56-d55dc67e7789","name":"⭐'
            '️⭐️","color":"default"},{"id":"d3782c76-0396-467f-928e-46bf0c9d5fb'
            'a","name":"⭐️","color":"default"}]}},"Type":{"id":"%2F7eo","name":'
            '"Type","type":"select","select":{"options":[{"id":"f96d0d0a-5564-4'
            'a20-ab15-5f040d49759e","name":"Article","color":"default"},{"id":"'
            '4ac85597-5db1-4e0a-9c02-445575c38f76","name":"TV Series","color":"'
            'default"},{"id":"2991748a-5745-4c3b-9c9b-2d6846a6fa1f","name":"Fil'
            'm","color":"default"},{"id":"82f3bace-be25-410d-87fe-561c9c22492f"'
            ',"name":"Podcast","color":"default"},{"id":"861f1076-1cc4-429a-a78'
            '1-54947d727a4a","name":"Academic Journal","color":"default"},{"id"'
            ':"9cc30548-59d6-4cd3-94bc-d234081525c4","name":"Essay Resource","c'
            'olor":"default"}]}},"Publisher":{"id":"%3E%24Pb","name":"Publisher'
            '","type":"select","select":{"options":[{"id":"c5ee409a-f307-4176-9'
            '9ee-6e424fa89afa","name":"NYT","color":"default"},{"id":"1b9b0c0c-'
            '17b0-4292-ad12-1364a51849de","name":"Netflix","color":"blue"},{"id'
            '":"f3533637-278f-4501-b394-d9753bf3c101","name":"Indie","color":"b'
            'rown"},{"id":"e70d713c-4be4-4b40-a44d-fb413c8b9d7e","name":"Bon Ap'
            'petit","color":"yellow"},{"id":"9c2bd667-0a10-4be4-a044-35a537a14a'
            'b9","name":"Franklin Institute","color":"pink"},{"id":"6849b5f0-e6'
            '41-4ec5-83cb-1ffe23011060","name":"Springer","color":"orange"},{"i'
            'd":"6a5bff63-a72d-4464-a5d0-1a601af2adf6","name":"Emerald Group","'
            'color":"gray"},{"id":"01f82d08-aa1f-4884-a4e0-3bc32f909ec4","name"'
            ':"The Atlantic","color":"red"}]}},"Summary":{"id":"%3F%5C25","name'
            '":"Summary","type":"rich_text","rich_text":{}},"Publishing/Release'
            ' Date":{"id":"%3Fex%2B","name":"Publishing/Release Date","type":"d'
            'ate","date":{}},"Link":{"id":"VVMi","name":"Link","type":"url","ur'
            'l":{}},"Read":{"id":"_MWJ","name":"Read","type":"checkbox","checkb'
            'ox":{}},"Status":{"id":"%60zz5","name":"Status","type":"select","s'
            'elect":{"options":[{"id":"8c4a056e-6709-4dd1-ba58-d34d9480855a","n'
            'ame":"Ready to Start","color":"yellow"},{"id":"5925ba22-0126-4b58-'
            '90c7-b8bbb2c3c895","name":"Reading","color":"red"},{"id":"59aa9043'
            '-07b4-4bf4-8734-3164b13af44a","name":"Finished","color":"blue"},{"'
            'id":"f961978d-02eb-4998-933a-33c2ec378564","name":"Listening","col'
            'or":"red"},{"id":"1d450853-b27a-45e2-979f-448aa1bd35de","name":"Wa'
            'tching","color":"red"}]}},"Author":{"id":"qNw_","name":"Author","t'
            'ype":"multi_select","multi_select":{"options":[{"id":"15592971-7b3'
            '0-43d5-9406-2eb69b13fcae","name":"Spencer Greenberg","color":"defa'
            'ult"},{"id":"b80a988e-dccf-4f74-b764-6ca0e49ed1b8","name":"Seth St'
            'ephens-Davidowitz","color":"default"},{"id":"0e71ee06-199d-46a4-83'
            '4c-01084c8f76cb","name":"Andrew Russell","color":"default"},{"id":'
            '"5807ec38-4879-4455-9f30-5352e90e8b79","name":"Lee Vinsel","color"'
            ':"default"},{"id":"4cf10a64-f3da-449c-8e04-ce6e338bbdbd","name":"M'
            'egan Greenwell","color":"default"},{"id":"833e2c78-35ed-4601-badc-'
            '50c323341d76","name":"Kara Swisher","color":"default"},{"id":"82e5'
            '94e2-b1c5-4271-ac19-1a723a94a533","name":"Paul Romer","color":"def'
            'ault"},{"id":"ae3a2cbe-1fc9-4376-be35-331628b34623","name":"Karen '
            'Swallow Prior","color":"default"},{"id":"da068e78-dfe2-4434-9fd7-b'
            '7450b3e5830","name":"Judith Shulevitz","color":"default"}]}},"Name'
            '":{"id":"title","name":"Name","type":"title","title":{}}},"parent"'
            ':{"type":"page_id","page_id":"c4d39556-6364-46a1-8a61-ebbb668f7445'
            '"},"url":"https://www.notion.so/8e2c2b769e1d47d287b9ed3035d607ae",'
            '"archived":false}')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # Update database properties
    def test_update_database_properties(self):
        # Parameters for the API call
        id = '{{DATABASE_ID}}'
        notion_version = '{{NOTION_VERSION}}'
        body = None

        # Perform the API call through the SDK function
        result = self.controller.update_database_properties(id, notion_version, body)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['date'] = None
        expected_headers['transfer-encoding'] = None
        expected_headers['connection'] = None
        expected_headers['set-cookie'] = None
        expected_headers['x-dns-prefetch-control'] = None
        expected_headers['x-frame-options'] = None
        expected_headers['strict-transport-security'] = None
        expected_headers['x-download-options'] = None
        expected_headers['x-content-type-options'] = None
        expected_headers['x-xss-protection'] = None
        expected_headers['referrer-policy'] = None
        expected_headers['content-security-policy'] = None
        expected_headers['x-content-security-policy'] = None
        expected_headers['x-webkit-csp'] = None
        expected_headers['etag'] = None
        expected_headers['vary'] = None
        expected_headers['content-encoding'] = None
        expected_headers['cf-cache-status'] = None
        expected_headers['expect-ct'] = None
        expected_headers['server'] = None
        expected_headers['cf-ray'] = None
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('{"object":"database","id":"8e2c2b76-9e1d-47d2-87b9-ed3035d607ae","'
            'cover":null,"icon":null,"created_time":"2021-04-27T20:38:00.000Z",'
            '"created_by":{"object":"user","id":"6794760a-1f15-45cd-9c65-0dfe42'
            'f5135a"},"last_edited_by":{"object":"user","id":"92a680bb-6970-472'
            '6-952b-4f4c03bff617"},"last_edited_time":"2022-02-24T22:08:00.000Z'
            '","title":[{"type":"text","text":{"content":"Ever Better Reading L'
            'ist Title","link":null},"annotations":{"bold":false,"italic":false'
            ',"strikethrough":false,"underline":false,"code":false,"color":"def'
            'ault"},"plain_text":"Ever Better Reading List Title","href":null}]'
            ',"properties":{"Score /5":{"id":")Y7\"","name":"Score /5","type":"'
            'select","select":{"options":[{"id":"5c944de7-3f4b-4567-b3a1-fa2c71'
            'c540b6","name":"⭐️⭐️⭐️⭐️⭐️","color":"default"},{"id":"b7307e35-c80'
            'a-4cb5-bb6b-6054523b394a","name":"⭐️⭐️⭐️⭐️","color":"default"},{"i'
            'd":"9b1e1349-8e24-40ba-bbca-84a61296bc81","name":"⭐️⭐️⭐️","color":'
            '"default"},{"id":"66d3d050-086c-4a91-8c56-d55dc67e7789","name":"⭐️'
            '⭐️","color":"default"},{"id":"d3782c76-0396-467f-928e-46bf0c9d5fba'
            '","name":"⭐️","color":"default"}]}},"Type":{"id":"/7eo","name":"Ty'
            'pe","type":"select","select":{"options":[{"id":"f96d0d0a-5564-4a20'
            '-ab15-5f040d49759e","name":"Article","color":"default"},{"id":"4ac'
            '85597-5db1-4e0a-9c02-445575c38f76","name":"TV Series","color":"def'
            'ault"},{"id":"2991748a-5745-4c3b-9c9b-2d6846a6fa1f","name":"Film",'
            '"color":"default"},{"id":"82f3bace-be25-410d-87fe-561c9c22492f","n'
            'ame":"Podcast","color":"default"},{"id":"861f1076-1cc4-429a-a781-5'
            '4947d727a4a","name":"Academic Journal","color":"default"},{"id":"9'
            'cc30548-59d6-4cd3-94bc-d234081525c4","name":"Essay Resource","colo'
            'r":"default"}]}},"Publisher":{"id":">$Pb","name":"Publisher","type'
            '":"select","select":{"options":[{"id":"c5ee409a-f307-4176-99ee-6e4'
            '24fa89afa","name":"NYT","color":"default"},{"id":"1b9b0c0c-17b0-42'
            '92-ad12-1364a51849de","name":"Netflix","color":"blue"},{"id":"f353'
            '3637-278f-4501-b394-d9753bf3c101","name":"Indie","color":"brown"},'
            '{"id":"e70d713c-4be4-4b40-a44d-fb413c8b9d7e","name":"Bon Appetit",'
            '"color":"yellow"},{"id":"9c2bd667-0a10-4be4-a044-35a537a14ab9","na'
            'me":"Franklin Institute","color":"pink"},{"id":"6849b5f0-e641-4ec5'
            '-83cb-1ffe23011060","name":"Springer","color":"orange"},{"id":"6a5'
            'bff63-a72d-4464-a5d0-1a601af2adf6","name":"Emerald Group","color":'
            '"gray"},{"id":"01f82d08-aa1f-4884-a4e0-3bc32f909ec4","name":"The A'
            'tlantic","color":"red"}]}},"Summary":{"id":"?\\\\25","name":"Summa'
            'ry","type":"rich_text","rich_text":{}},"Publishing/Release Date":{'
            '"id":"?ex+","name":"Publishing/Release Date","type":"date","date":'
            '{}},"Link":{"id":"VVMi","name":"Link","type":"url","url":{}},"Wine'
            ' Pairing":{"id":"Y=H]","name":"Wine Pairing","type":"rich_text","r'
            'ich_text":{}},"Read":{"id":"_MWJ","name":"Read","type":"checkbox",'
            '"checkbox":{}},"Status":{"id":"`zz5","name":"Status","type":"selec'
            't","select":{"options":[{"id":"8c4a056e-6709-4dd1-ba58-d34d9480855'
            'a","name":"Ready to Start","color":"yellow"},{"id":"5925ba22-0126-'
            '4b58-90c7-b8bbb2c3c895","name":"Reading","color":"red"},{"id":"59a'
            'a9043-07b4-4bf4-8734-3164b13af44a","name":"Finished","color":"blue'
            '"},{"id":"f961978d-02eb-4998-933a-33c2ec378564","name":"Listening"'
            ',"color":"red"},{"id":"1d450853-b27a-45e2-979f-448aa1bd35de","name'
            '":"Watching","color":"red"}]}},"Author":{"id":"qNw_","name":"Autho'
            'r","type":"multi_select","multi_select":{"options":[{"id":"1559297'
            '1-7b30-43d5-9406-2eb69b13fcae","name":"Spencer Greenberg","color":'
            '"default"},{"id":"b80a988e-dccf-4f74-b764-6ca0e49ed1b8","name":"Se'
            'th Stephens-Davidowitz","color":"default"},{"id":"0e71ee06-199d-46'
            'a4-834c-01084c8f76cb","name":"Andrew Russell","color":"default"},{'
            '"id":"5807ec38-4879-4455-9f30-5352e90e8b79","name":"Lee Vinsel","c'
            'olor":"default"},{"id":"4cf10a64-f3da-449c-8e04-ce6e338bbdbd","nam'
            'e":"Megan Greenwell","color":"default"},{"id":"833e2c78-35ed-4601-'
            'badc-50c323341d76","name":"Kara Swisher","color":"default"},{"id":'
            '"82e594e2-b1c5-4271-ac19-1a723a94a533","name":"Paul Romer","color"'
            ':"default"},{"id":"ae3a2cbe-1fc9-4376-be35-331628b34623","name":"K'
            'aren Swallow Prior","color":"default"},{"id":"da068e78-dfe2-4434-9'
            'fd7-b7450b3e5830","name":"Judith Shulevitz","color":"default"}]}},'
            '"Name":{"id":"title","name":"Name","type":"title","title":{}}},"pa'
            'rent":{"type":"page_id","page_id":"c4d39556-6364-46a1-8a61-ebbb668'
            'f7445"},"url":"https://www.notion.so/8e2c2b769e1d47d287b9ed3035d60'
            '7ae","archived":false}')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # Filter a database
    def test_filter_a_database(self):
        # Parameters for the API call
        id = '{{DATABASE_ID}}'
        authorization = 'Bearer secret_t1CdN9S8yicG5eWLUOfhcWaOscVnFXns'
        notion_version = '{{NOTION_VERSION}}'
        body = None

        # Perform the API call through the SDK function
        result = self.controller.filter_a_database(id, authorization, notion_version, body)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['date'] = None
        expected_headers['transfer-encoding'] = None
        expected_headers['connection'] = None
        expected_headers['set-cookie'] = None
        expected_headers['x-dns-prefetch-control'] = None
        expected_headers['x-frame-options'] = None
        expected_headers['strict-transport-security'] = None
        expected_headers['x-download-options'] = None
        expected_headers['x-content-type-options'] = None
        expected_headers['x-xss-protection'] = None
        expected_headers['referrer-policy'] = None
        expected_headers['content-security-policy'] = None
        expected_headers['x-content-security-policy'] = None
        expected_headers['x-webkit-csp'] = None
        expected_headers['etag'] = None
        expected_headers['vary'] = None
        expected_headers['content-encoding'] = None
        expected_headers['cf-cache-status'] = None
        expected_headers['expect-ct'] = None
        expected_headers['server'] = None
        expected_headers['cf-ray'] = None
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('{"object":"list","results":[{"object":"page","id":"a1712d54-53e4-4'
            '893-a69d-4d581cd2c845","created_time":"2021-04-27T20:38:00.000Z","'
            'last_edited_time":"2021-05-12T06:07:00.000Z","created_by":{"object'
            '":"user","id":"6794760a-1f15-45cd-9c65-0dfe42f5135a"},"last_edited'
            '_by":{"object":"user","id":"92a680bb-6970-4726-952b-4f4c03bff617"}'
            ',"cover":null,"icon":null,"parent":{"type":"database_id","database'
            '_id":"8e2c2b76-9e1d-47d2-87b9-ed3035d607ae"},"archived":false,"pro'
            'perties":{"Score /5":{"id":")Y7%22","type":"select","select":{"id"'
            ':"b7307e35-c80a-4cb5-bb6b-6054523b394a","name":"⭐️⭐️⭐️⭐️","color":'
            '"default"}},"Type":{"id":"%2F7eo","type":"select","select":{"id":"'
            'f96d0d0a-5564-4a20-ab15-5f040d49759e","name":"Article","color":"de'
            'fault"}},"Publisher":{"id":"%3E%24Pb","type":"select","select":{"i'
            'd":"c5ee409a-f307-4176-99ee-6e424fa89afa","name":"NYT","color":"de'
            'fault"}},"Summary":{"id":"%3F%5C25","type":"rich_text","rich_text"'
            ':[{"type":"text","text":{"content":"Some think chief ethics office'
            'rs could help technology companies navigate political and social q'
            'uestions.","link":null},"annotations":{"bold":false,"italic":false'
            ',"strikethrough":false,"underline":false,"code":false,"color":"def'
            'ault"},"plain_text":"Some think chief ethics officers could help t'
            'echnology companies navigate political and social questions.","hre'
            'f":null}]},"Publishing/Release Date":{"id":"%3Fex%2B","type":"date'
            '","date":{"start":"2018-10-21","end":null,"time_zone":null}},"Link'
            '":{"id":"VVMi","type":"url","url":"https://www.nytimes.com/2018/10'
            '/21/opinion/who-will-teach-silicon-valley-to-be-ethical.html"},"Re'
            'ad":{"id":"_MWJ","type":"checkbox","checkbox":true},"Status":{"id"'
            ':"%60zz5","type":"select","select":{"id":"5925ba22-0126-4b58-90c7-'
            'b8bbb2c3c895","name":"Reading","color":"red"}},"Author":{"id":"qNw'
            '_","type":"multi_select","multi_select":[{"id":"833e2c78-35ed-4601'
            '-badc-50c323341d76","name":"Kara Swisher","color":"default"}]},"Na'
            'me":{"id":"title","type":"title","title":[{"type":"text","text":{"'
            'content":"Who Will Teach Silicon Valley to Be Ethical? ","link":nu'
            'll},"annotations":{"bold":false,"italic":false,"strikethrough":fal'
            'se,"underline":false,"code":false,"color":"default"},"plain_text":'
            '"Who Will Teach Silicon Valley to Be Ethical? ","href":null}]}},"u'
            'rl":"https://www.notion.so/Who-Will-Teach-Silicon-Valley-to-Be-Eth'
            'ical-a1712d5453e44893a69d4d581cd2c845"},{"object":"page","id":"557'
            'ef501-bfdb-4586-918e-4434f31bca8c","created_time":"2021-04-27T20:3'
            '8:00.000Z","last_edited_time":"2021-04-27T20:38:00.000Z","created_'
            'by":{"object":"user","id":"6794760a-1f15-45cd-9c65-0dfe42f5135a"},'
            '"last_edited_by":{"object":"user","id":"6794760a-1f15-45cd-9c65-0d'
            'fe42f5135a"},"cover":null,"icon":null,"parent":{"type":"database_i'
            'd","database_id":"8e2c2b76-9e1d-47d2-87b9-ed3035d607ae"},"archived'
            '":false,"properties":{"Score /5":{"id":")Y7%22","type":"select","s'
            'elect":{"id":"66d3d050-086c-4a91-8c56-d55dc67e7789","name":"⭐️⭐️",'
            '"color":"default"}},"Type":{"id":"%2F7eo","type":"select","select"'
            ':{"id":"9cc30548-59d6-4cd3-94bc-d234081525c4","name":"Essay Resour'
            'ce","color":"default"}},"Publisher":{"id":"%3E%24Pb","type":"selec'
            't","select":{"id":"01f82d08-aa1f-4884-a4e0-3bc32f909ec4","name":"T'
            'he Atlantic","color":"red"}},"Summary":{"id":"%3F%5C25","type":"ri'
            'ch_text","rich_text":[]},"Publishing/Release Date":{"id":"%3Fex%2B'
            '","type":"date","date":{"start":"2016-10-03","end":null,"time_zone'
            '":null}},"Link":{"id":"VVMi","type":"url","url":"https://www.theat'
            'lantic.com/entertainment/archive/2016/03/how-jane-eyre-created-the'
            '-modern-self/460461/"},"Read":{"id":"_MWJ","type":"checkbox","chec'
            'kbox":false},"Status":{"id":"%60zz5","type":"select","select":{"id'
            '":"5925ba22-0126-4b58-90c7-b8bbb2c3c895","name":"Reading","color":'
            '"red"}},"Author":{"id":"qNw_","type":"multi_select","multi_select"'
            ':[{"id":"ae3a2cbe-1fc9-4376-be35-331628b34623","name":"Karen Swall'
            'ow Prior","color":"default"}]},"Name":{"id":"title","type":"title"'
            ',"title":[{"type":"text","text":{"content":"Jane Eyre","link":null'
            '},"annotations":{"bold":false,"italic":true,"strikethrough":false,'
            '"underline":false,"code":false,"color":"default"},"plain_text":"Ja'
            'ne Eyre","href":null},{"type":"text","text":{"content":" and the I'
            'nvention of Self","link":null},"annotations":{"bold":false,"italic'
            '":false,"strikethrough":false,"underline":false,"code":false,"colo'
            'r":"default"},"plain_text":" and the Invention of Self","href":nul'
            'l}]}},"url":"https://www.notion.so/Jane-Eyre-and-the-Invention-of-'
            'Self-557ef501bfdb4586918e4434f31bca8c"},{"object":"page","id":"7ea'
            '694fa-93bb-43ba-b342-90a7706e55aa","created_time":"2021-04-27T20:3'
            '8:00.000Z","last_edited_time":"2021-04-27T20:38:00.000Z","created_'
            'by":{"object":"user","id":"6794760a-1f15-45cd-9c65-0dfe42f5135a"},'
            '"last_edited_by":{"object":"user","id":"6794760a-1f15-45cd-9c65-0d'
            'fe42f5135a"},"cover":null,"icon":null,"parent":{"type":"database_i'
            'd","database_id":"8e2c2b76-9e1d-47d2-87b9-ed3035d607ae"},"archived'
            '":false,"properties":{"Score /5":{"id":")Y7%22","type":"select","s'
            'elect":null},"Type":{"id":"%2F7eo","type":"select","select":{"id":'
            '"f96d0d0a-5564-4a20-ab15-5f040d49759e","name":"Article","color":"d'
            'efault"}},"Publisher":{"id":"%3E%24Pb","type":"select","select":{"'
            'id":"c5ee409a-f307-4176-99ee-6e424fa89afa","name":"NYT","color":"d'
            'efault"}},"Summary":{"id":"%3F%5C25","type":"rich_text","rich_text'
            '":[{"type":"text","text":{"content":"Putting a levy on targeted ad'
            ' revenue would give Facebook and Google a real incentive to change'
            ' their dangerous business models.","link":null},"annotations":{"bo'
            'ld":false,"italic":false,"strikethrough":false,"underline":false,"'
            'code":false,"color":"default"},"plain_text":"Putting a levy on tar'
            'geted ad revenue would give Facebook and Google a real incentive t'
            'o change their dangerous business models.","href":null}]},"Publish'
            'ing/Release Date":{"id":"%3Fex%2B","type":"date","date":{"start":"'
            '2019-10-06","end":null,"time_zone":null}},"Link":{"id":"VVMi","typ'
            'e":"url","url":"https://www.nytimes.com/2019/05/06/opinion/tax-fac'
            'ebook-google.html"},"Read":{"id":"_MWJ","type":"checkbox","checkbo'
            'x":false},"Status":{"id":"%60zz5","type":"select","select":{"id":"'
            '8c4a056e-6709-4dd1-ba58-d34d9480855a","name":"Ready to Start","col'
            'or":"yellow"}},"Author":{"id":"qNw_","type":"multi_select","multi_'
            'select":[{"id":"82e594e2-b1c5-4271-ac19-1a723a94a533","name":"Paul'
            ' Romer","color":"default"}]},"Name":{"id":"title","type":"title","'
            'title":[{"type":"text","text":{"content":"A Tax That Could Fix Big'
            ' Tech ","link":null},"annotations":{"bold":false,"italic":false,"s'
            'trikethrough":false,"underline":false,"code":false,"color":"defaul'
            't"},"plain_text":"A Tax That Could Fix Big Tech ","href":null}]}},'
            '"url":"https://www.notion.so/A-Tax-That-Could-Fix-Big-Tech-7ea694f'
            'a93bb43bab34290a7706e55aa"}],"next_cursor":null,"has_more":false}')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # Create a database
    def test_create_a_database(self):
        # Parameters for the API call
        notion_version = '{{NOTION_VERSION}}'
        body = None

        # Perform the API call through the SDK function
        result = self.controller.create_a_database(notion_version, body)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['date'] = None
        expected_headers['transfer-encoding'] = None
        expected_headers['connection'] = None
        expected_headers['set-cookie'] = None
        expected_headers['x-dns-prefetch-control'] = None
        expected_headers['x-frame-options'] = None
        expected_headers['strict-transport-security'] = None
        expected_headers['x-download-options'] = None
        expected_headers['x-content-type-options'] = None
        expected_headers['x-xss-protection'] = None
        expected_headers['referrer-policy'] = None
        expected_headers['content-security-policy'] = None
        expected_headers['x-content-security-policy'] = None
        expected_headers['x-webkit-csp'] = None
        expected_headers['etag'] = None
        expected_headers['vary'] = None
        expected_headers['content-encoding'] = None
        expected_headers['cf-cache-status'] = None
        expected_headers['expect-ct'] = None
        expected_headers['server'] = None
        expected_headers['cf-ray'] = None
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('{"object":"database","id":"23cde96c-0ad8-41d8-bfa2-b477c63dd52a","'
            'cover":null,"icon":null,"created_time":"2022-02-24T22:06:00.000Z",'
            '"created_by":{"object":"user","id":"92a680bb-6970-4726-952b-4f4c03'
            'bff617"},"last_edited_by":{"object":"user","id":"92a680bb-6970-472'
            '6-952b-4f4c03bff617"},"last_edited_time":"2022-02-24T22:06:00.000Z'
            '","title":[{"type":"text","text":{"content":"Grocery List","link":'
            'null},"annotations":{"bold":false,"italic":false,"strikethrough":f'
            'alse,"underline":false,"code":false,"color":"default"},"plain_text'
            '":"Grocery List","href":null}],"properties":{"Description":{"id":"'
            '%3EWW~","name":"Description","type":"rich_text","rich_text":{}},"L'
            'ast ordered":{"id":"O%5C%3BK","name":"Last ordered","type":"date",'
            '"date":{}},"In stock":{"id":"Pya%5C","name":"In stock","type":"che'
            'ckbox","checkbox":{}},"+1":{"id":"%5CSky","name":"+1","type":"peop'
            'le","people":{}},"Photo":{"id":"dSrT","name":"Photo","type":"files'
            '","files":{}},"Store availability":{"id":"jRd%3E","name":"Store av'
            'ailability","type":"multi_select","multi_select":{"options":[{"id"'
            ':"8e6441ee-8f17-4833-a2fe-68af5dced24f","name":"Duc Loi Market","c'
            'olor":"blue"},{"id":"64a9da77-9805-461f-9773-1e176fdbd203","name":'
            '"Rainbow Grocery","color":"gray"},{"id":"012d0436-66a1-4613-a1bd-3'
            '14b1d1d059b","name":"Nijiya Market","color":"purple"},{"id":"63ab3'
            '1f9-8cbd-4d02-8688-752376f455ea","name":"Gus\'s Community Market",'
            '"color":"yellow"}]}},"Food group":{"id":"q%5DO%5B","name":"Food gr'
            'oup","type":"select","select":{"options":[{"id":"392af858-f42f-43e'
            'a-a171-7c0ca5c0a683","name":"🥦Vegetable","color":"green"},{"id":"'
            'df461a24-14c6-494a-8c61-55775fedbdcd","name":"🍎Fruit","color":"re'
            'd"},{"id":"0ff22aaa-348e-4194-83c2-67a76dfb10fc","name":"💪Protein'
            '","color":"yellow"}]}},"Price":{"id":"t%60jj","name":"Price","type'
            '":"number","number":{"format":"dollar"}},"Name":{"id":"title","nam'
            'e":"Name","type":"title","title":{}}},"parent":{"type":"page_id","'
            'page_id":"c4d39556-6364-46a1-8a61-ebbb668f7445"},"url":"https://ww'
            'w.notion.so/23cde96c0ad841d8bfa2b477c63dd52a","archived":false}')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

